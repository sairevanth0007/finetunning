{
  "improve_classification_only": {
    "comment": [],
    "task": "img-classification",
    "addon_task": null,
    "input_list": [
      {
        "para": "nn_code",
        "value": "nn_code"
      },
      {
        "para": "accuracy",
        "value": "accuracy"
      },
      {
        "para": "epoch",
        "value": "epoch"
      },
      {
        "para": "dataset",
        "value": "dataset"
      },
      {
        "para": "task",
        "value": "task"
      },
      {
        "para": "metric",
        "value": "metric"
      },
      {
        "para": "metric_code",
        "value": "metric_code"
      },
      {
        "para": "transform_code",
        "value": "transform_code"
      },
      {
        "para": "prm",
        "value": "prm"
      }
    ],
    "addon_list": [
      {
        "para": "addon_epoch",
        "value": "epoch"
      },
      {
        "para": "addon_dataset",
        "value": "dataset"
      },
      {
        "para": "addon_task",
        "value": "task"
      },
      {
        "para": "addon_metric",
        "value": "metric"
      },
      {
        "para": "addon_nn_code",
        "value": "nn_code"
      },
      {
        "para": "addon_prm",
        "value": "prm"
      }
    ],
    "no_repeat": [],
    "keep_same": [],
    "prompt": [
      "Return the training hyperparameters (as a JSON object between XML tags <hp> and </hp>) and corresponding neural network model (as a Python code between XML tags <nn> and </nn>) that achieves a maximum value for the metric '{addon_metric}' at epoch {addon_epoch} on the '{addon_dataset}' dataset for the task '{addon_task}'.",
      "1. Training hyperparameters (JSON object between XML tags <hp> and </hp>):",
      "  Obligatory keys \"batch\", \"transform\", and all keys from the 'supported_hyperparameters' function in model code. Do not use any other keys like \"hp*\".",
      "  If unsure, use: \"batch\": 64, \"transform\": \"norm_128_flip\".",
      "2. Neural network model (Python code between XML tags <nn> and </nn>):",
      "   It's critical to modify the returned modelâ€™s internal architecture to ensure it differs from all models in the LEMUR NN Dataset by:",
      "   Adding, removing, or adjusting existing neural network layers and their arguments.",
      "   Reordering or restructuring layers (e.g., changing dimensions or sequence).",
      "   To generate the new model, use common patterns and ideas from the following reference LEMUR Dataset neural network model and its training configuration, which achieved for a metric '{metric}' value of {accuracy} at epoch {epoch} on the '{dataset}' dataset for the task '{task}' with training hyperparameters <hp>{prm}</hp>, and a code provided in the corresponding tags:",
      "<transform>{transform_code}</transform>",
      "<metric>{metric_code}</metric>",
      "<nn>{nn_code}</nn>",
      "Ensure the neural network code follows the LEMUR NN Dataset conventions."
    ]
  },
  "improve_segmentation_only": {
    "input_list": [
      {
        "para": "nn_code",
        "value": "nn_code"
      }
    ],
    "addon_list": [
      {
        "para": "addon_nn_code",
        "value": "nn_code"
      }
    ],
    "task": "img-segmentation",
    "addon_task": "img-classification",
    "prompt": [
      "Improve the following implementation to make it a better performance on image segmentation tasks given another backbone implementation.",
      "The class name should be 'Net' and you MUST PROVIDE FULL CODES of the changed implementation.",
      "You can change the structure, alternatively also changed training procedure.",
      "Strictly DO NOT remove the `train_setup` and `learn` method, and NEVER change their parameters or implementation.",
      "Strictly NO use of models in `torchvision`.",
      "Focus on improving the model architecture and forward pass only.",
      "Code:\n```\n{nn_code}\n```",
      "Backbone:\n```\n{addon_nn_code}\n```"
    ]
  }
}